# coding: utf-8

"""
    Merchant Benchmark API

    Deliver Visa’s data insights and other key analytics to our clients through the Visa Developer Platform

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RequestData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, group_list=None, msa_list=None, merchant_category_code_list=None, pos_entry_mode_list=None, postal_code_list=None, country_subdivision_list=None, card_present_indicator=None, account_funding_source_list=None, eci_indicator_list=None, merchant_category_groups_code_list=None, month_list=None, platform_id_list=None, merchant_country=None):
        """
        RequestData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'group_list': 'str',
            'msa_list': 'str',
            'merchant_category_code_list': 'str',
            'pos_entry_mode_list': 'str',
            'postal_code_list': 'str',
            'country_subdivision_list': 'str',
            'card_present_indicator': 'str',
            'account_funding_source_list': 'str',
            'eci_indicator_list': 'str',
            'merchant_category_groups_code_list': 'str',
            'month_list': 'str',
            'platform_id_list': 'str',
            'merchant_country': 'str'
        }

        self.attribute_map = {
            'group_list': 'groupList',
            'msa_list': 'msaList',
            'merchant_category_code_list': 'merchantCategoryCodeList',
            'pos_entry_mode_list': 'posEntryModeList',
            'postal_code_list': 'postalCodeList',
            'country_subdivision_list': 'countrySubdivisionList',
            'card_present_indicator': 'cardPresentIndicator',
            'account_funding_source_list': 'accountFundingSourceList',
            'eci_indicator_list': 'eciIndicatorList',
            'merchant_category_groups_code_list': 'merchantCategoryGroupsCodeList',
            'month_list': 'monthList',
            'platform_id_list': 'platformIDList',
            'merchant_country': 'merchantCountry'
        }

        self._group_list = group_list
        self._msa_list = msa_list
        self._merchant_category_code_list = merchant_category_code_list
        self._pos_entry_mode_list = pos_entry_mode_list
        self._postal_code_list = postal_code_list
        self._country_subdivision_list = country_subdivision_list
        self._card_present_indicator = card_present_indicator
        self._account_funding_source_list = account_funding_source_list
        self._eci_indicator_list = eci_indicator_list
        self._merchant_category_groups_code_list = merchant_category_groups_code_list
        self._month_list = month_list
        self._platform_id_list = platform_id_list
        self._merchant_country = merchant_country

    @property
    def group_list(self):
        """
        Gets the group_list of this RequestData.
        Groups for which the end user is registered to the API. Example- Standard/Cardholder/cbreasoncode

        :return: The group_list of this RequestData.
        :rtype: str
        """
        return self._group_list

    @group_list.setter
    def group_list(self, group_list):
        """
        Sets the group_list of this RequestData.
        Groups for which the end user is registered to the API. Example- Standard/Cardholder/cbreasoncode

        :param group_list: The group_list of this RequestData.
        :type: str
        """
        if group_list is None:
            raise ValueError("Invalid value for `group_list`, must not be `None`")

        self._group_list = group_list

    @property
    def msa_list(self):
        """
        Gets the msa_list of this RequestData.
        Valid Metropolitan Statistical Area in US

        :return: The msa_list of this RequestData.
        :rtype: str
        """
        return self._msa_list

    @msa_list.setter
    def msa_list(self, msa_list):
        """
        Sets the msa_list of this RequestData.
        Valid Metropolitan Statistical Area in US

        :param msa_list: The msa_list of this RequestData.
        :type: str
        """
        if msa_list is None:
            raise ValueError("Invalid value for `msa_list`, must not be `None`")

        self._msa_list = msa_list

    @property
    def merchant_category_code_list(self):
        """
        Gets the merchant_category_code_list of this RequestData.
        Any valid merchant category code.

        :return: The merchant_category_code_list of this RequestData.
        :rtype: str
        """
        return self._merchant_category_code_list

    @merchant_category_code_list.setter
    def merchant_category_code_list(self, merchant_category_code_list):
        """
        Sets the merchant_category_code_list of this RequestData.
        Any valid merchant category code.

        :param merchant_category_code_list: The merchant_category_code_list of this RequestData.
        :type: str
        """
        if merchant_category_code_list is None:
            raise ValueError("Invalid value for `merchant_category_code_list`, must not be `None`")

        self._merchant_category_code_list = merchant_category_code_list

    @property
    def pos_entry_mode_list(self):
        """
        Gets the pos_entry_mode_list of this RequestData.
        Valid Point of Sale Entry Mode

        :return: The pos_entry_mode_list of this RequestData.
        :rtype: str
        """
        return self._pos_entry_mode_list

    @pos_entry_mode_list.setter
    def pos_entry_mode_list(self, pos_entry_mode_list):
        """
        Sets the pos_entry_mode_list of this RequestData.
        Valid Point of Sale Entry Mode

        :param pos_entry_mode_list: The pos_entry_mode_list of this RequestData.
        :type: str
        """
        if pos_entry_mode_list is None:
            raise ValueError("Invalid value for `pos_entry_mode_list`, must not be `None`")

        self._pos_entry_mode_list = pos_entry_mode_list

    @property
    def postal_code_list(self):
        """
        Gets the postal_code_list of this RequestData.
        Valid Postal Code in the United States

        :return: The postal_code_list of this RequestData.
        :rtype: str
        """
        return self._postal_code_list

    @postal_code_list.setter
    def postal_code_list(self, postal_code_list):
        """
        Sets the postal_code_list of this RequestData.
        Valid Postal Code in the United States

        :param postal_code_list: The postal_code_list of this RequestData.
        :type: str
        """
        if postal_code_list is None:
            raise ValueError("Invalid value for `postal_code_list`, must not be `None`")

        self._postal_code_list = postal_code_list

    @property
    def country_subdivision_list(self):
        """
        Gets the country_subdivision_list of this RequestData.
        Valid Country Sub Division List

        :return: The country_subdivision_list of this RequestData.
        :rtype: str
        """
        return self._country_subdivision_list

    @country_subdivision_list.setter
    def country_subdivision_list(self, country_subdivision_list):
        """
        Sets the country_subdivision_list of this RequestData.
        Valid Country Sub Division List

        :param country_subdivision_list: The country_subdivision_list of this RequestData.
        :type: str
        """
        if country_subdivision_list is None:
            raise ValueError("Invalid value for `country_subdivision_list`, must not be `None`")

        self._country_subdivision_list = country_subdivision_list

    @property
    def card_present_indicator(self):
        """
        Gets the card_present_indicator of this RequestData.
        To differentiatiate between online and in store transactions.Example- CARDPRESENT/CARDNOTPRESENT/ALL

        :return: The card_present_indicator of this RequestData.
        :rtype: str
        """
        return self._card_present_indicator

    @card_present_indicator.setter
    def card_present_indicator(self, card_present_indicator):
        """
        Sets the card_present_indicator of this RequestData.
        To differentiatiate between online and in store transactions.Example- CARDPRESENT/CARDNOTPRESENT/ALL

        :param card_present_indicator: The card_present_indicator of this RequestData.
        :type: str
        """
        if card_present_indicator is None:
            raise ValueError("Invalid value for `card_present_indicator`, must not be `None`")

        self._card_present_indicator = card_present_indicator

    @property
    def account_funding_source_list(self):
        """
        Gets the account_funding_source_list of this RequestData.
        Type of Funding Source transactions.

        :return: The account_funding_source_list of this RequestData.
        :rtype: str
        """
        return self._account_funding_source_list

    @account_funding_source_list.setter
    def account_funding_source_list(self, account_funding_source_list):
        """
        Sets the account_funding_source_list of this RequestData.
        Type of Funding Source transactions.

        :param account_funding_source_list: The account_funding_source_list of this RequestData.
        :type: str
        """
        if account_funding_source_list is None:
            raise ValueError("Invalid value for `account_funding_source_list`, must not be `None`")

        self._account_funding_source_list = account_funding_source_list

    @property
    def eci_indicator_list(self):
        """
        Gets the eci_indicator_list of this RequestData.
        Valid ECI Indicator.

        :return: The eci_indicator_list of this RequestData.
        :rtype: str
        """
        return self._eci_indicator_list

    @eci_indicator_list.setter
    def eci_indicator_list(self, eci_indicator_list):
        """
        Sets the eci_indicator_list of this RequestData.
        Valid ECI Indicator.

        :param eci_indicator_list: The eci_indicator_list of this RequestData.
        :type: str
        """
        if eci_indicator_list is None:
            raise ValueError("Invalid value for `eci_indicator_list`, must not be `None`")

        self._eci_indicator_list = eci_indicator_list

    @property
    def merchant_category_groups_code_list(self):
        """
        Gets the merchant_category_groups_code_list of this RequestData.
        Any valid merchant category group codes.

        :return: The merchant_category_groups_code_list of this RequestData.
        :rtype: str
        """
        return self._merchant_category_groups_code_list

    @merchant_category_groups_code_list.setter
    def merchant_category_groups_code_list(self, merchant_category_groups_code_list):
        """
        Sets the merchant_category_groups_code_list of this RequestData.
        Any valid merchant category group codes.

        :param merchant_category_groups_code_list: The merchant_category_groups_code_list of this RequestData.
        :type: str
        """
        if merchant_category_groups_code_list is None:
            raise ValueError("Invalid value for `merchant_category_groups_code_list`, must not be `None`")

        self._merchant_category_groups_code_list = merchant_category_groups_code_list

    @property
    def month_list(self):
        """
        Gets the month_list of this RequestData.
        Valid Months. Ex: 201601 for Jan 2016

        :return: The month_list of this RequestData.
        :rtype: str
        """
        return self._month_list

    @month_list.setter
    def month_list(self, month_list):
        """
        Sets the month_list of this RequestData.
        Valid Months. Ex: 201601 for Jan 2016

        :param month_list: The month_list of this RequestData.
        :type: str
        """
        if month_list is None:
            raise ValueError("Invalid value for `month_list`, must not be `None`")

        self._month_list = month_list

    @property
    def platform_id_list(self):
        """
        Gets the platform_id_list of this RequestData.
        Valid Product Platform

        :return: The platform_id_list of this RequestData.
        :rtype: str
        """
        return self._platform_id_list

    @platform_id_list.setter
    def platform_id_list(self, platform_id_list):
        """
        Sets the platform_id_list of this RequestData.
        Valid Product Platform

        :param platform_id_list: The platform_id_list of this RequestData.
        :type: str
        """
        if platform_id_list is None:
            raise ValueError("Invalid value for `platform_id_list`, must not be `None`")

        self._platform_id_list = platform_id_list

    @property
    def merchant_country(self):
        """
        Gets the merchant_country of this RequestData.
        Valid Merchant Country. Current API supports US only

        :return: The merchant_country of this RequestData.
        :rtype: str
        """
        return self._merchant_country

    @merchant_country.setter
    def merchant_country(self, merchant_country):
        """
        Sets the merchant_country of this RequestData.
        Valid Merchant Country. Current API supports US only

        :param merchant_country: The merchant_country of this RequestData.
        :type: str
        """
        if merchant_country is None:
            raise ValueError("Invalid value for `merchant_country`, must not be `None`")

        self._merchant_country = merchant_country

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RequestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------