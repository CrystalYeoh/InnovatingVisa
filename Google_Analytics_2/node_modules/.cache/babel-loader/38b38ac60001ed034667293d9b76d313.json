{"ast":null,"code":"var _jsxFileName = \"/home/whitebeard4708/Documents/Internship/VISA/react-google-analytics-dashboard-master/src/Dashboard/countriesReport.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { PieChartWrapper, colors } from \"./styles\";\nimport { addDays } from \"date-fns\";\nimport CustomDatePicker from \"./datepicker\";\nimport { queryReport } from \"./queryReport\";\nimport { ChartTitle, ReportWrapper, Subtitle, DatepickerRow } from \"./styles\";\nimport \"chartjs-plugin-datalabels\";\n\nconst CountriesReport = props => {\n  const INITIAL_STATE = {\n    labels: [],\n    values: [],\n    colors: []\n  };\n  const [reportData, setReportData] = useState(INITIAL_STATE);\n  const [startDate, setStartDate] = useState(addDays(new Date(), -10));\n  const [endDate, setEndDate] = useState(new Date());\n  const [totalCoutries, setTotalCountries] = useState(0);\n  const [totalUsers, setTotalUsers] = useState(0);\n\n  const displayResults = response => {\n    const queryResult = response.result.reports[0].data.rows;\n    setTotalUsers(response.result.reports[0].data.totals[0].values[0]);\n    setTotalCountries(queryResult.length);\n    let labels = [];\n    let values = [];\n    let bgColors = [];\n    queryResult.forEach((row, idx) => {\n      if (idx < 5) {\n        labels.push(row.dimensions[0]);\n        values.push(row.metrics[0].values[0]);\n        bgColors.push(colors[idx + 1]);\n      }\n    });\n    setReportData({ ...reportData,\n      labels,\n      values,\n      colors: bgColors\n    });\n  };\n\n  const data = {\n    labels: reportData.labels,\n    datasets: [{\n      data: reportData.values,\n      backgroundColor: reportData.colors\n    }]\n  };\n  const options = {\n    tooltips: {\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return data.labels[tooltipItem[\"index\"]];\n        }\n      }\n    },\n    plugins: {\n      datalabels: {\n        color: \"black\",\n        font: {\n          size: 20\n        },\n        formatter: function (value, context) {\n          const perc = parseInt(value / totalUsers * 100);\n          return perc + \"%\";\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const request = {\n      viewID: props.viewID,\n      startDate,\n      endDate,\n      metrics: \"ga:users\",\n      dimensions: [\"ga:country\"],\n      orderBy: {\n        fieldName: \"ga:users\",\n        order: \"DESCENDING\"\n      }\n    };\n    setTimeout(() => queryReport(request).then(resp => displayResults(resp)).catch(error => console.error(error)), 1000);\n  }, [startDate, endDate]);\n  return /*#__PURE__*/React.createElement(ReportWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ChartTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"Top 5 Countries by Users\"), /*#__PURE__*/React.createElement(Subtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, `Total countries - ${totalCoutries}`), /*#__PURE__*/React.createElement(DatepickerRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CustomDatePicker, {\n    placeholder: \"Start date\",\n    date: startDate,\n    handleDateChange: date => setStartDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CustomDatePicker, {\n    placeholder: \"End date\",\n    date: endDate,\n    handleDateChange: date => setEndDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  })), reportData && /*#__PURE__*/React.createElement(PieChartWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Pie, {\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default CountriesReport;","map":{"version":3,"sources":["/home/whitebeard4708/Documents/Internship/VISA/react-google-analytics-dashboard-master/src/Dashboard/countriesReport.js"],"names":["React","useState","useEffect","Pie","PieChartWrapper","colors","addDays","CustomDatePicker","queryReport","ChartTitle","ReportWrapper","Subtitle","DatepickerRow","CountriesReport","props","INITIAL_STATE","labels","values","reportData","setReportData","startDate","setStartDate","Date","endDate","setEndDate","totalCoutries","setTotalCountries","totalUsers","setTotalUsers","displayResults","response","queryResult","result","reports","data","rows","totals","length","bgColors","forEach","row","idx","push","dimensions","metrics","datasets","backgroundColor","options","tooltips","callbacks","label","tooltipItem","plugins","datalabels","color","font","size","formatter","value","context","perc","parseInt","request","viewID","orderBy","fieldName","order","setTimeout","then","resp","catch","error","console","date"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { PieChartWrapper, colors } from \"./styles\";\nimport { addDays } from \"date-fns\";\nimport CustomDatePicker from \"./datepicker\";\nimport { queryReport } from \"./queryReport\";\nimport { ChartTitle, ReportWrapper, Subtitle, DatepickerRow } from \"./styles\";\nimport \"chartjs-plugin-datalabels\";\n\nconst CountriesReport = (props) => {\n  const INITIAL_STATE = {\n    labels: [],\n    values: [],\n    colors: [],\n  };\n  const [reportData, setReportData] = useState(INITIAL_STATE);\n  const [startDate, setStartDate] = useState(addDays(new Date(), -10));\n  const [endDate, setEndDate] = useState(new Date());\n  const [totalCoutries, setTotalCountries] = useState(0);\n  const [totalUsers, setTotalUsers] = useState(0);\n\n  const displayResults = (response) => {\n    const queryResult = response.result.reports[0].data.rows;\n    setTotalUsers(response.result.reports[0].data.totals[0].values[0]);\n    setTotalCountries(queryResult.length);\n    let labels = [];\n    let values = [];\n    let bgColors = [];\n    queryResult.forEach((row, idx) => {\n      if (idx < 5) {\n        labels.push(row.dimensions[0]);\n        values.push(row.metrics[0].values[0]);\n        bgColors.push(colors[idx + 1]);\n      }\n    });\n    setReportData({\n      ...reportData,\n      labels,\n      values,\n      colors: bgColors,\n    });\n  };\n\n  const data = {\n    labels: reportData.labels,\n    datasets: [\n      {\n        data: reportData.values,\n        backgroundColor: reportData.colors,\n      },\n    ],\n  };\n\n  const options = {\n    tooltips: {\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return data.labels[tooltipItem[\"index\"]];\n        },\n      },\n    },\n    plugins: {\n      datalabels: {\n        color: \"black\",\n        font: {\n          size: 20,\n        },\n        formatter: function (value, context) {\n          const perc = parseInt((value / totalUsers) * 100);\n          return perc + \"%\";\n        },\n      },\n    },\n  };\n\n  useEffect(() => {\n    const request = {\n      viewID: props.viewID,\n      startDate,\n      endDate,\n      metrics: \"ga:users\",\n      dimensions: [\"ga:country\"],\n      orderBy: {\n        fieldName: \"ga:users\",\n        order: \"DESCENDING\",\n      },\n    };\n    setTimeout(\n      () =>\n        queryReport(request)\n          .then((resp) => displayResults(resp))\n          .catch((error) => console.error(error)),\n      1000\n    );\n  }, [startDate, endDate]);\n\n  return (\n    <ReportWrapper>\n      <ChartTitle>Top 5 Countries by Users</ChartTitle>\n      <Subtitle>{`Total countries - ${totalCoutries}`}</Subtitle>\n      <DatepickerRow>\n        <CustomDatePicker\n          placeholder={\"Start date\"}\n          date={startDate}\n          handleDateChange={(date) => setStartDate(date)}\n        />\n        <CustomDatePicker\n          placeholder={\"End date\"}\n          date={endDate}\n          handleDateChange={(date) => setEndDate(date)}\n        />\n      </DatepickerRow>\n      {reportData && (\n        <PieChartWrapper>\n          <Pie data={data} options={options} />\n        </PieChartWrapper>\n      )}\n    </ReportWrapper>\n  );\n};\n\nexport default CountriesReport;\n"]},"metadata":{},"sourceType":"module"}