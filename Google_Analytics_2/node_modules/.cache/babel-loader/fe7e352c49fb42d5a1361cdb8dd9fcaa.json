{"ast":null,"code":"var _jsxFileName = \"/home/whitebeard4708/Documents/Internship/VISA/react-google-analytics-dashboard-master/src/Dashboard/dayVisitsReport.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { addDays } from \"date-fns\";\nimport { ChartWrapper, ReportWrapper, ChartTitle, Subtitle, DatepickerRow } from \"./styles\";\nimport CustomDatePicker from \"./datepicker\";\nimport { queryReport } from \"./queryReport\";\nimport { formatDate } from \"./utils\";\n\nconst DayVisitsReport = props => {\n  const INITIAL_STATE = {\n    labels: [],\n    values: []\n  };\n  const [reportData, setReportData] = useState(INITIAL_STATE);\n  const [startDate, setStartDate] = useState(addDays(new Date(), -10));\n  const [endDate, setEndDate] = useState(new Date());\n  const [average, setAverage] = useState(0);\n\n  const displayResults = response => {\n    const queryResult = response.result.reports[0].data.rows;\n    const total = response.result.reports[0].data.totals[0].values[0];\n    setAverage(parseInt(total / response.result.reports[0].data.rowCount));\n    let labels = [];\n    let values = [];\n    queryResult.forEach(row => {\n      labels.push(formatDate(row.dimensions[0]));\n      values.push(row.metrics[0].values[0]);\n    });\n    setReportData({ ...reportData,\n      labels,\n      values\n    });\n  };\n\n  const data = {\n    labels: reportData.labels,\n    datasets: [{\n      label: `${props.title} per day`,\n      fill: false,\n      lineTension: 0.3,\n      borderColor: \"#35213d\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"#375751\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: reportData.values\n    }]\n  };\n  const options = {\n    scales: {\n      yAxes: [{\n        ticks: {\n          suggestedMin: 0\n        }\n      }],\n      xAxes: [{\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 7\n        }\n      }]\n    },\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    plugins: {\n      datalabels: {\n        font: {\n          size: 0\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const request = {\n      viewID: props.viewID,\n      startDate,\n      endDate,\n      metrics: props.metric,\n      dimensions: [\"ga:date\"]\n    };\n    queryReport(request).then(resp => displayResults(resp)).catch(error => console.error(error));\n  }, [startDate, endDate]);\n  return /*#__PURE__*/React.createElement(ReportWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ChartTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, `${props.title} per day`), /*#__PURE__*/React.createElement(Subtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, `Average - ${average} ${props.title}`), /*#__PURE__*/React.createElement(DatepickerRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CustomDatePicker, {\n    placeholder: \"Start date\",\n    date: startDate,\n    handleDateChange: date => setStartDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CustomDatePicker, {\n    placeholder: \"End date\",\n    date: endDate,\n    handleDateChange: date => setEndDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  })), reportData && /*#__PURE__*/React.createElement(ChartWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data,\n    options: options,\n    width: 100,\n    height: 250,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default DayVisitsReport;","map":{"version":3,"sources":["/home/whitebeard4708/Documents/Internship/VISA/react-google-analytics-dashboard-master/src/Dashboard/dayVisitsReport.js"],"names":["React","useState","useEffect","Line","addDays","ChartWrapper","ReportWrapper","ChartTitle","Subtitle","DatepickerRow","CustomDatePicker","queryReport","formatDate","DayVisitsReport","props","INITIAL_STATE","labels","values","reportData","setReportData","startDate","setStartDate","Date","endDate","setEndDate","average","setAverage","displayResults","response","queryResult","result","reports","data","rows","total","totals","parseInt","rowCount","forEach","row","push","dimensions","metrics","datasets","label","title","fill","lineTension","borderColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","scales","yAxes","ticks","suggestedMin","xAxes","autoSkip","maxTicksLimit","maintainAspectRatio","legend","display","plugins","datalabels","font","size","request","viewID","metric","then","resp","catch","error","console","date"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,UAHF,EAIEC,QAJF,EAKEC,aALF,QAMO,UANP;AAOA,OAAOC,gBAAP,MAA6B,cAA7B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,UAAT,QAA2B,SAA3B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAMC,aAAa,GAAG;AACpBC,IAAAA,MAAM,EAAE,EADY;AAEpBC,IAAAA,MAAM,EAAE;AAFY,GAAtB;AAIA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAACc,aAAD,CAA5C;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAACG,OAAO,CAAC,IAAIkB,IAAJ,EAAD,EAAa,CAAC,EAAd,CAAR,CAA1C;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,IAAIqB,IAAJ,EAAD,CAAtC;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAC,CAAD,CAAtC;;AAEA,QAAM0B,cAAc,GAAIC,QAAD,IAAc;AACnC,UAAMC,WAAW,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,OAAhB,CAAwB,CAAxB,EAA2BC,IAA3B,CAAgCC,IAApD;AACA,UAAMC,KAAK,GAAGN,QAAQ,CAACE,MAAT,CAAgBC,OAAhB,CAAwB,CAAxB,EAA2BC,IAA3B,CAAgCG,MAAhC,CAAuC,CAAvC,EAA0ClB,MAA1C,CAAiD,CAAjD,CAAd;AACAS,IAAAA,UAAU,CAACU,QAAQ,CAACF,KAAK,GAAGN,QAAQ,CAACE,MAAT,CAAgBC,OAAhB,CAAwB,CAAxB,EAA2BC,IAA3B,CAAgCK,QAAzC,CAAT,CAAV;AACA,QAAIrB,MAAM,GAAG,EAAb;AACA,QAAIC,MAAM,GAAG,EAAb;AACAY,IAAAA,WAAW,CAACS,OAAZ,CAAqBC,GAAD,IAAS;AAC3BvB,MAAAA,MAAM,CAACwB,IAAP,CAAY5B,UAAU,CAAC2B,GAAG,CAACE,UAAJ,CAAe,CAAf,CAAD,CAAtB;AACAxB,MAAAA,MAAM,CAACuB,IAAP,CAAYD,GAAG,CAACG,OAAJ,CAAY,CAAZ,EAAezB,MAAf,CAAsB,CAAtB,CAAZ;AACD,KAHD;AAIAE,IAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZF,MAAAA,MAFY;AAGZC,MAAAA;AAHY,KAAD,CAAb;AAKD,GAfD;;AAiBA,QAAMe,IAAI,GAAG;AACXhB,IAAAA,MAAM,EAAEE,UAAU,CAACF,MADR;AAEX2B,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAG,GAAE9B,KAAK,CAAC+B,KAAM,UADxB;AAEEC,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,WAAW,EAAE,GAHf;AAIEC,MAAAA,WAAW,EAAE,SAJf;AAKEC,MAAAA,gBAAgB,EAAE,CALpB;AAMEC,MAAAA,gBAAgB,EAAE,CANpB;AAOEC,MAAAA,yBAAyB,EAAE,SAP7B;AAQEC,MAAAA,qBAAqB,EAAE,qBARzB;AASEC,MAAAA,qBAAqB,EAAE,CATzB;AAUEC,MAAAA,WAAW,EAAE,CAVf;AAWEC,MAAAA,cAAc,EAAE,EAXlB;AAYEvB,MAAAA,IAAI,EAAEd,UAAU,CAACD;AAZnB,KADQ;AAFC,GAAb;AAoBA,QAAMuC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,KAAK,EAAE;AACLC,UAAAA,YAAY,EAAE;AADT;AADT,OADK,CADD;AAQNC,MAAAA,KAAK,EAAE,CACL;AACEF,QAAAA,KAAK,EAAE;AACLG,UAAAA,QAAQ,EAAE,IADL;AAELC,UAAAA,aAAa,EAAE;AAFV;AADT,OADK;AARD,KADM;AAkBdC,IAAAA,mBAAmB,EAAE,KAlBP;AAmBdC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE;AADH,KAnBM;AAsBdC,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAE;AACVC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE;AADF;AADI;AADL;AAtBK,GAAhB;AA+BApE,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqE,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE1D,KAAK,CAAC0D,MADA;AAEdpD,MAAAA,SAFc;AAGdG,MAAAA,OAHc;AAIdmB,MAAAA,OAAO,EAAE5B,KAAK,CAAC2D,MAJD;AAKdhC,MAAAA,UAAU,EAAE,CAAC,SAAD;AALE,KAAhB;AAOA9B,IAAAA,WAAW,CAAC4D,OAAD,CAAX,CACGG,IADH,CACSC,IAAD,IAAUhD,cAAc,CAACgD,IAAD,CADhC,EAEGC,KAFH,CAEUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAFpB;AAGD,GAXQ,EAWN,CAACzD,SAAD,EAAYG,OAAZ,CAXM,CAAT;AAaA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAc,GAAET,KAAK,CAAC+B,KAAM,UAA5B,CADF,eAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAY,aAAYpB,OAAQ,IAAGX,KAAK,CAAC+B,KAAM,EAA/C,CAFF,eAGE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AACE,IAAA,WAAW,EAAE,YADf;AAEE,IAAA,IAAI,EAAEzB,SAFR;AAGE,IAAA,gBAAgB,EAAG2D,IAAD,IAAU1D,YAAY,CAAC0D,IAAD,CAH1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAME,oBAAC,gBAAD;AACE,IAAA,WAAW,EAAE,UADf;AAEE,IAAA,IAAI,EAAExD,OAFR;AAGE,IAAA,gBAAgB,EAAGwD,IAAD,IAAUvD,UAAU,CAACuD,IAAD,CAHxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAHF,EAeG7D,UAAU,iBACT,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEc,IAAZ;AAAkB,IAAA,OAAO,EAAEwB,OAA3B;AAAoC,IAAA,KAAK,EAAE,GAA3C;AAAgD,IAAA,MAAM,EAAE,GAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAhBJ,CADF;AAuBD,CAlHD;;AAoHA,eAAe3C,eAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { addDays } from \"date-fns\";\nimport {\n  ChartWrapper,\n  ReportWrapper,\n  ChartTitle,\n  Subtitle,\n  DatepickerRow,\n} from \"./styles\";\nimport CustomDatePicker from \"./datepicker\";\nimport { queryReport } from \"./queryReport\";\nimport { formatDate } from \"./utils\";\n\nconst DayVisitsReport = (props) => {\n  const INITIAL_STATE = {\n    labels: [],\n    values: [],\n  };\n  const [reportData, setReportData] = useState(INITIAL_STATE);\n  const [startDate, setStartDate] = useState(addDays(new Date(), -10));\n  const [endDate, setEndDate] = useState(new Date());\n  const [average, setAverage] = useState(0);\n\n  const displayResults = (response) => {\n    const queryResult = response.result.reports[0].data.rows;\n    const total = response.result.reports[0].data.totals[0].values[0];\n    setAverage(parseInt(total / response.result.reports[0].data.rowCount));\n    let labels = [];\n    let values = [];\n    queryResult.forEach((row) => {\n      labels.push(formatDate(row.dimensions[0]));\n      values.push(row.metrics[0].values[0]);\n    });\n    setReportData({\n      ...reportData,\n      labels,\n      values,\n    });\n  };\n\n  const data = {\n    labels: reportData.labels,\n    datasets: [\n      {\n        label: `${props.title} per day`,\n        fill: false,\n        lineTension: 0.3,\n        borderColor: \"#35213d\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"#375751\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: reportData.values,\n      },\n    ],\n  };\n\n  const options = {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            suggestedMin: 0,\n          },\n        },\n      ],\n      xAxes: [\n        {\n          ticks: {\n            autoSkip: true,\n            maxTicksLimit: 7,\n          },\n        },\n      ],\n    },\n    maintainAspectRatio: false,\n    legend: {\n      display: false,\n    },\n    plugins: {\n      datalabels: {\n        font: {\n          size: 0,\n        },\n      },\n    },\n  };\n\n  useEffect(() => {\n    const request = {\n      viewID: props.viewID,\n      startDate,\n      endDate,\n      metrics: props.metric,\n      dimensions: [\"ga:date\"],\n    };\n    queryReport(request)\n      .then((resp) => displayResults(resp))\n      .catch((error) => console.error(error));\n  }, [startDate, endDate]);\n\n  return (\n    <ReportWrapper>\n      <ChartTitle>{`${props.title} per day`}</ChartTitle>\n      <Subtitle>{`Average - ${average} ${props.title}`}</Subtitle>\n      <DatepickerRow>\n        <CustomDatePicker\n          placeholder={\"Start date\"}\n          date={startDate}\n          handleDateChange={(date) => setStartDate(date)}\n        />\n        <CustomDatePicker\n          placeholder={\"End date\"}\n          date={endDate}\n          handleDateChange={(date) => setEndDate(date)}\n        />\n      </DatepickerRow>\n      {reportData && (\n        <ChartWrapper>\n          <Line data={data} options={options} width={100} height={250} />\n        </ChartWrapper>\n      )}\n    </ReportWrapper>\n  );\n};\n\nexport default DayVisitsReport;\n"]},"metadata":{},"sourceType":"module"}