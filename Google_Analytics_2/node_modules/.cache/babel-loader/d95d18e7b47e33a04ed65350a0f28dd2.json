{"ast":null,"code":"var _jsxFileName = \"/home/whitebeard4708/Documents/Internship/VISA/react-google-analytics-dashboard-master/src/Dashboard/browsersReport.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { addDays } from \"date-fns\";\nimport { Pie } from \"react-chartjs-2\";\nimport CustomDatePicker from \"./datepicker\";\nimport { queryReport } from \"./queryReport\";\nimport { ChartTitle, Subtitle, PieChartWrapper, colors } from \"./styles\";\n\nconst BrowsersReport = props => {\n  const INITIAL_STATE = {\n    labels: [],\n    values: [],\n    colors: []\n  };\n  const [reportData, setReportData] = useState(INITIAL_STATE);\n  const [startDate, setStartDate] = useState(addDays(new Date(), -10));\n  const [endDate, setEndDate] = useState(new Date());\n  const [totalUsers, setTotalUsers] = useState(0);\n\n  const displayResults = response => {\n    const queryResult = response.result.reports[0].data.rows;\n    const total = response.result.reports[0].data.totals[0].values[0];\n    setTotalUsers(total);\n    let labels = [];\n    let values = [];\n    let bgColors = [];\n    queryResult.forEach((row, id) => {\n      labels.push(row.dimensions[0]);\n      values.push(row.metrics[0].values[0]);\n      bgColors.push(colors[id]);\n    });\n    setReportData({ ...reportData,\n      labels,\n      values,\n      colors: bgColors\n    });\n  };\n\n  const data = {\n    labels: reportData.labels,\n    datasets: [{\n      data: reportData.values,\n      backgroundColor: reportData.colors\n    }]\n  };\n  const options = {\n    legend: {\n      position: \"bottom\"\n    },\n    maintainAspectRatio: false,\n    plugins: {\n      datalabels: {\n        font: {\n          size: 0\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const request = {\n      viewID: props.viewID,\n      startDate,\n      endDate,\n      metrics: \"ga:users\",\n      dimensions: [\"ga:browser\"]\n    };\n    setTimeout(() => queryReport(request).then(resp => displayResults(resp)).catch(error => console.error(error)), 1500);\n  }, [startDate, endDate]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ChartTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"Browsers by Users\"), /*#__PURE__*/React.createElement(Subtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, `Total Users - ${totalUsers}`), /*#__PURE__*/React.createElement(CustomDatePicker, {\n    placeholder: \"Start date\",\n    date: startDate,\n    handleDateChange: date => setStartDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CustomDatePicker, {\n    placeholder: \"End date\",\n    date: endDate,\n    handleDateChange: date => setEndDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), reportData && /*#__PURE__*/React.createElement(PieChartWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Pie, {\n    data: data,\n    options: options,\n    width: 300,\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default BrowsersReport;","map":{"version":3,"sources":["/home/whitebeard4708/Documents/Internship/VISA/react-google-analytics-dashboard-master/src/Dashboard/browsersReport.js"],"names":["React","useState","useEffect","addDays","Pie","CustomDatePicker","queryReport","ChartTitle","Subtitle","PieChartWrapper","colors","BrowsersReport","props","INITIAL_STATE","labels","values","reportData","setReportData","startDate","setStartDate","Date","endDate","setEndDate","totalUsers","setTotalUsers","displayResults","response","queryResult","result","reports","data","rows","total","totals","bgColors","forEach","row","id","push","dimensions","metrics","datasets","backgroundColor","options","legend","position","maintainAspectRatio","plugins","datalabels","font","size","request","viewID","setTimeout","then","resp","catch","error","console","date"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { addDays } from \"date-fns\";\nimport { Pie } from \"react-chartjs-2\";\nimport CustomDatePicker from \"./datepicker\";\nimport { queryReport } from \"./queryReport\";\nimport { ChartTitle, Subtitle, PieChartWrapper, colors } from \"./styles\";\n\nconst BrowsersReport = (props) => {\n  const INITIAL_STATE = {\n    labels: [],\n    values: [],\n    colors: [],\n  };\n  const [reportData, setReportData] = useState(INITIAL_STATE);\n  const [startDate, setStartDate] = useState(addDays(new Date(), -10));\n  const [endDate, setEndDate] = useState(new Date());\n  const [totalUsers, setTotalUsers] = useState(0);\n\n  const displayResults = (response) => {\n    const queryResult = response.result.reports[0].data.rows;\n    const total = response.result.reports[0].data.totals[0].values[0];\n    setTotalUsers(total);\n    let labels = [];\n    let values = [];\n    let bgColors = [];\n    queryResult.forEach((row, id) => {\n      labels.push(row.dimensions[0]);\n      values.push(row.metrics[0].values[0]);\n      bgColors.push(colors[id]);\n    });\n    setReportData({\n      ...reportData,\n      labels,\n      values,\n      colors: bgColors,\n    });\n  };\n\n  const data = {\n    labels: reportData.labels,\n    datasets: [\n      {\n        data: reportData.values,\n        backgroundColor: reportData.colors,\n      },\n    ],\n  };\n\n  const options = {\n    legend: { position: \"bottom\" },\n    maintainAspectRatio: false,\n    plugins: {\n      datalabels: {\n        font: {\n          size: 0,\n        },\n      },\n    },\n  };\n\n  useEffect(() => {\n    const request = {\n      viewID: props.viewID,\n      startDate,\n      endDate,\n      metrics: \"ga:users\",\n      dimensions: [\"ga:browser\"],\n    };\n    setTimeout(\n      () =>\n        queryReport(request)\n          .then((resp) => displayResults(resp))\n          .catch((error) => console.error(error)),\n      1500\n    );\n  }, [startDate, endDate]);\n\n  return (\n    <div>\n      <ChartTitle>Browsers by Users</ChartTitle>\n      <Subtitle>{`Total Users - ${totalUsers}`}</Subtitle>\n      <CustomDatePicker\n        placeholder={\"Start date\"}\n        date={startDate}\n        handleDateChange={(date) => setStartDate(date)}\n      />\n      <CustomDatePicker\n        placeholder={\"End date\"}\n        date={endDate}\n        handleDateChange={(date) => setEndDate(date)}\n      />\n      {reportData && (\n        <PieChartWrapper>\n          <Pie data={data} options={options} width={300} height={300} />\n        </PieChartWrapper>\n      )}\n    </div>\n  );\n};\n\nexport default BrowsersReport;\n"]},"metadata":{},"sourceType":"module"}