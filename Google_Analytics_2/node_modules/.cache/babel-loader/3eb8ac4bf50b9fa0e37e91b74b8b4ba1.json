{"ast":null,"code":"var _jsxFileName = \"/home/whitebeard4708/Documents/Internship/VISA/react-google-analytics-dashboard-master/src/Dashboard/pageviewReport.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { addDays } from \"date-fns\";\nimport CustomDatePicker from \"./datepicker\";\nimport { queryReport } from \"./queryReport\";\nimport { ChartTitle, ReportWrapper, Subtitle, DatepickerRow, StyledTable } from \"./styles\";\n\nconst PageviewsReport = props => {\n  const [reportData, setReportData] = useState([]);\n  const [startDate, setStartDate] = useState(addDays(new Date(), -10));\n  const [endDate, setEndDate] = useState(new Date());\n  const [totalPages, setTotalPages] = useState(0);\n\n  const displayResults = response => {\n    const queryResult = response.result.reports[0].data.rows;\n    setTotalPages(queryResult.length);\n    const total = response.result.reports[0].data.totals[0].values[0];\n    let newReportData = [];\n    queryResult.forEach((row, idx) => {\n      if (idx < 10) {\n        let tempObj = {\n          path: row.dimensions[0],\n          views: row.metrics[0].values[0],\n          perc: `${parseFloat(row.metrics[0].values[0] / total * 100).toFixed(1)}%`\n        };\n        newReportData.push(tempObj);\n      }\n    });\n    setReportData(newReportData);\n  };\n\n  useEffect(() => {\n    const request = {\n      viewID: props.viewID,\n      startDate,\n      endDate,\n      metrics: \"ga:pageviews\",\n      dimensions: [\"ga:pagePath\"],\n      orderBy: {\n        fieldName: \"ga:pageViews\",\n        order: \"DESCENDING\"\n      },\n      filter: \"ga:pagePath!@localhost/\"\n    };\n    setTimeout(() => queryReport(request).then(resp => displayResults(resp)).catch(error => console.error(error)), 1000);\n  }, [startDate, endDate]);\n  return /*#__PURE__*/React.createElement(ReportWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ChartTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Top 10 Pages by Views\"), /*#__PURE__*/React.createElement(Subtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, `Total pages - ${totalPages}`), /*#__PURE__*/React.createElement(DatepickerRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CustomDatePicker, {\n    placeholder: \"Start date\",\n    date: startDate,\n    handleDateChange: date => setStartDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CustomDatePicker, {\n    placeholder: \"End date\",\n    date: endDate,\n    handleDateChange: date => setEndDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })), reportData.length && /*#__PURE__*/React.createElement(StyledTable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"Page\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, \"Views\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, \"%\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, reportData.map((row, id) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"left-align\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, row.path), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, row.views), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, row.perc))))));\n};\n\nexport default PageviewsReport;","map":{"version":3,"sources":["/home/whitebeard4708/Documents/Internship/VISA/react-google-analytics-dashboard-master/src/Dashboard/pageviewReport.js"],"names":["React","useState","useEffect","addDays","CustomDatePicker","queryReport","ChartTitle","ReportWrapper","Subtitle","DatepickerRow","StyledTable","PageviewsReport","props","reportData","setReportData","startDate","setStartDate","Date","endDate","setEndDate","totalPages","setTotalPages","displayResults","response","queryResult","result","reports","data","rows","length","total","totals","values","newReportData","forEach","row","idx","tempObj","path","dimensions","views","metrics","perc","parseFloat","toFixed","push","request","viewID","orderBy","fieldName","order","filter","setTimeout","then","resp","catch","error","console","date","map","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { addDays } from \"date-fns\";\nimport CustomDatePicker from \"./datepicker\";\nimport { queryReport } from \"./queryReport\";\nimport {\n  ChartTitle,\n  ReportWrapper,\n  Subtitle,\n  DatepickerRow,\n  StyledTable,\n} from \"./styles\";\n\nconst PageviewsReport = (props) => {\n  const [reportData, setReportData] = useState([]);\n  const [startDate, setStartDate] = useState(addDays(new Date(), -10));\n  const [endDate, setEndDate] = useState(new Date());\n  const [totalPages, setTotalPages] = useState(0);\n\n  const displayResults = (response) => {\n    const queryResult = response.result.reports[0].data.rows;\n    setTotalPages(queryResult.length);\n    const total = response.result.reports[0].data.totals[0].values[0];\n    let newReportData = [];\n    queryResult.forEach((row, idx) => {\n      if (idx < 10) {\n        let tempObj = {\n          path: row.dimensions[0],\n          views: row.metrics[0].values[0],\n          perc: `${parseFloat((row.metrics[0].values[0] / total) * 100).toFixed(\n            1\n          )}%`,\n        };\n        newReportData.push(tempObj);\n      }\n    });\n    setReportData(newReportData);\n  };\n\n  useEffect(() => {\n    const request = {\n      viewID: props.viewID,\n      startDate,\n      endDate,\n      metrics: \"ga:pageviews\",\n      dimensions: [\"ga:pagePath\"],\n      orderBy: {\n        fieldName: \"ga:pageViews\",\n        order: \"DESCENDING\",\n      },\n      filter: \"ga:pagePath!@localhost/\",\n    };\n    setTimeout(\n      () =>\n        queryReport(request)\n          .then((resp) => displayResults(resp))\n          .catch((error) => console.error(error)),\n      1000\n    );\n  }, [startDate, endDate]);\n\n  return (\n    <ReportWrapper>\n      <ChartTitle>Top 10 Pages by Views</ChartTitle>\n      <Subtitle>{`Total pages - ${totalPages}`}</Subtitle>\n      <DatepickerRow>\n        <CustomDatePicker\n          placeholder={\"Start date\"}\n          date={startDate}\n          handleDateChange={(date) => setStartDate(date)}\n        />\n        <CustomDatePicker\n          placeholder={\"End date\"}\n          date={endDate}\n          handleDateChange={(date) => setEndDate(date)}\n        />\n      </DatepickerRow>\n      {reportData.length && (\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Page</th>\n              <th>Views</th>\n              <th>%</th>\n            </tr>\n          </thead>\n          <tbody>\n            {reportData.map((row, id) => (\n              <tr key={id}>\n                <td className=\"left-align\">{row.path}</td>\n                <td>{row.views}</td>\n                <td>{row.perc}</td>\n              </tr>\n            ))}\n          </tbody>\n        </StyledTable>\n      )}\n    </ReportWrapper>\n  );\n};\n\nexport default PageviewsReport;\n"]},"metadata":{},"sourceType":"module"}