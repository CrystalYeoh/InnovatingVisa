{"ast":null,"code":"var _jsxFileName = \"/home/whitebeard4708/Documents/Internship/VISA/react-google-analytics-dashboard-master/src/Dashboard/sourceReport.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { addDays, format } from \"date-fns\";\nimport CustomDatePicker from \"./datepicker\";\nimport { queryReport } from \"./queryReport\";\nimport { formatDate, transformToDate } from \"./utils\";\nimport { ChartTitle, ReportWrapper, Subtitle, DatepickerRow, ChartWrapper, colors } from \"./styles\";\n\nconst SourceReport = props => {\n  const INITIAL_STATE = {\n    labels: [],\n    datasets: []\n  };\n  const [reportData, setReportData] = useState(INITIAL_STATE);\n  const [startDate, setStartDate] = useState(addDays(new Date(), -10));\n  const [endDate, setEndDate] = useState(new Date());\n  const [totalSources, setTotalSources] = useState(0);\n\n  const transformAPIData = data => {\n    let transformedData = [];\n    let datesArray = [];\n    data.forEach(row => {\n      transformedData.push({\n        date: formatDate(row.dimensions[1]),\n        source: row.dimensions[0],\n        visits: row.metrics[0].values[0]\n      });\n      datesArray.push(transformToDate(row.dimensions[1]));\n    });\n    return [transformedData, datesArray];\n  };\n\n  const groupDataBySource = data => {\n    return data.reduce((r, a) => {\n      r[a.source] = r[a.source] || [];\n      r[a.source].push(a);\n      return r;\n    }, Object.create(null));\n  };\n\n  const sortSourcesByTotalVisits = data => {\n    let sumedVisits = [];\n\n    for (let [key, value] of Object.entries(data)) {\n      const sumOfVisits = value.reduce((a, b) => {\n        return a + parseInt(b.visits);\n      }, 0);\n      sumedVisits.push({\n        source: key,\n        visits: sumOfVisits\n      });\n    }\n\n    return sumedVisits.sort((a, b) => b.visits - a.visits);\n  };\n\n  const createDataForChart = (datesArray, sumedVisits, groupedBySource) => {\n    datesArray.sort((a, b) => {\n      return new Date(a) - new Date(b);\n    });\n    const datesFormatted = datesArray.map(date => format(new Date(date), \"MMM. d, yyyy\"));\n    const uniqueDates = [...new Set(datesFormatted)];\n    let datasetsArray = [];\n    let i = 0;\n    sumedVisits.forEach((item, id) => {\n      if (id < 5) {\n        const label = item.source;\n        const backgroundColor = colors[i + 3];\n        i++;\n        let data = [];\n        uniqueDates.forEach(date => {\n          const row = groupedBySource[item.source].find(item => item.date === date);\n\n          if (row) {\n            data.push(parseInt(row.visits));\n          } else {\n            data.push(0);\n          }\n        });\n        datasetsArray.push({\n          label,\n          backgroundColor,\n          data\n        });\n      }\n    });\n    return {\n      labels: uniqueDates,\n      data: datasetsArray\n    };\n  };\n\n  const displayResults = response => {\n    const queryResult = response.result.reports[0].data.rows;\n    const data = transformAPIData(queryResult);\n    let transformedData = data[0];\n    let datesArray = data[1];\n    const groupedBySource = groupDataBySource(transformedData);\n    setTotalSources(Object.keys(groupedBySource).length);\n    const sumedVisits = sortSourcesByTotalVisits(groupedBySource);\n    const dataForChart = createDataForChart(datesArray, sumedVisits, groupedBySource);\n    setReportData({ ...reportData,\n      labels: dataForChart.labels,\n      datasets: dataForChart.data\n    });\n  };\n\n  const options = {\n    tooltips: {\n      displayColors: true,\n      callbacks: {\n        mode: \"x\"\n      }\n    },\n    scales: {\n      xAxes: [{\n        stacked: true,\n        gridLines: {\n          display: false\n        }\n      }],\n      yAxes: [{\n        stacked: true,\n        ticks: {\n          beginAtZero: true\n        },\n        type: \"linear\"\n      }]\n    },\n    maintainAspectRatio: false,\n    legend: {\n      position: \"bottom\"\n    },\n    plugins: {\n      datalabels: {\n        font: {\n          size: 0\n        }\n      }\n    }\n  };\n  const data = {\n    labels: reportData.labels,\n    datasets: reportData.datasets\n  };\n  useEffect(() => {\n    const request = {\n      viewID: props.viewID,\n      startDate,\n      endDate,\n      metrics: \"ga:users\",\n      dimensions: [\"ga:source\", \"ga:date\"]\n    };\n    setTimeout(() => queryReport(request).then(resp => displayResults(resp)).catch(error => console.error(error)), 1100);\n  }, [startDate, endDate]);\n  return /*#__PURE__*/React.createElement(ReportWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ChartTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, \"Top 5 Sources of Visits\"), /*#__PURE__*/React.createElement(Subtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, `Total sources - ${totalSources}`), /*#__PURE__*/React.createElement(DatepickerRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CustomDatePicker, {\n    placeholder: \"Start date\",\n    date: startDate,\n    handleDateChange: date => setStartDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CustomDatePicker, {\n    placeholder: \"End date\",\n    date: endDate,\n    handleDateChange: date => setEndDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  })), reportData && /*#__PURE__*/React.createElement(ChartWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: data,\n    width: 100,\n    height: 250,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default SourceReport;","map":{"version":3,"sources":["/home/whitebeard4708/Documents/Internship/VISA/react-google-analytics-dashboard-master/src/Dashboard/sourceReport.js"],"names":["React","useEffect","useState","Bar","addDays","format","CustomDatePicker","queryReport","formatDate","transformToDate","ChartTitle","ReportWrapper","Subtitle","DatepickerRow","ChartWrapper","colors","SourceReport","props","INITIAL_STATE","labels","datasets","reportData","setReportData","startDate","setStartDate","Date","endDate","setEndDate","totalSources","setTotalSources","transformAPIData","data","transformedData","datesArray","forEach","row","push","date","dimensions","source","visits","metrics","values","groupDataBySource","reduce","r","a","Object","create","sortSourcesByTotalVisits","sumedVisits","key","value","entries","sumOfVisits","b","parseInt","sort","createDataForChart","groupedBySource","datesFormatted","map","uniqueDates","Set","datasetsArray","i","item","id","label","backgroundColor","find","displayResults","response","queryResult","result","reports","rows","keys","length","dataForChart","options","tooltips","displayColors","callbacks","mode","scales","xAxes","stacked","gridLines","display","yAxes","ticks","beginAtZero","type","maintainAspectRatio","legend","position","plugins","datalabels","font","size","request","viewID","setTimeout","then","resp","catch","error","console"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { addDays, format } from \"date-fns\";\nimport CustomDatePicker from \"./datepicker\";\nimport { queryReport } from \"./queryReport\";\nimport { formatDate, transformToDate } from \"./utils\";\nimport {\n  ChartTitle,\n  ReportWrapper,\n  Subtitle,\n  DatepickerRow,\n  ChartWrapper,\n  colors,\n} from \"./styles\";\n\nconst SourceReport = (props) => {\n  const INITIAL_STATE = {\n    labels: [],\n    datasets: [],\n  };\n  const [reportData, setReportData] = useState(INITIAL_STATE);\n  const [startDate, setStartDate] = useState(addDays(new Date(), -10));\n  const [endDate, setEndDate] = useState(new Date());\n  const [totalSources, setTotalSources] = useState(0);\n\n  const transformAPIData = (data) => {\n    let transformedData = [];\n    let datesArray = [];\n    data.forEach((row) => {\n      transformedData.push({\n        date: formatDate(row.dimensions[1]),\n        source: row.dimensions[0],\n        visits: row.metrics[0].values[0],\n      });\n      datesArray.push(transformToDate(row.dimensions[1]));\n    });\n    return [transformedData, datesArray];\n  };\n\n  const groupDataBySource = (data) => {\n    return data.reduce((r, a) => {\n      r[a.source] = r[a.source] || [];\n      r[a.source].push(a);\n      return r;\n    }, Object.create(null));\n  };\n\n  const sortSourcesByTotalVisits = (data) => {\n    let sumedVisits = [];\n    for (let [key, value] of Object.entries(data)) {\n      const sumOfVisits = value.reduce((a, b) => {\n        return a + parseInt(b.visits);\n      }, 0);\n      sumedVisits.push({\n        source: key,\n        visits: sumOfVisits,\n      });\n    }\n    return sumedVisits.sort((a, b) => b.visits - a.visits);\n  };\n\n  const createDataForChart = (datesArray, sumedVisits, groupedBySource) => {\n    datesArray.sort((a, b) => {\n      return new Date(a) - new Date(b);\n    });\n    const datesFormatted = datesArray.map((date) =>\n      format(new Date(date), \"MMM. d, yyyy\")\n    );\n    const uniqueDates = [...new Set(datesFormatted)];\n    let datasetsArray = [];\n    let i = 0;\n    sumedVisits.forEach((item, id) => {\n      if (id < 5) {\n        const label = item.source;\n        const backgroundColor = colors[i + 3];\n        i++;\n        let data = [];\n        uniqueDates.forEach((date) => {\n          const row = groupedBySource[item.source].find(\n            (item) => item.date === date\n          );\n          if (row) {\n            data.push(parseInt(row.visits));\n          } else {\n            data.push(0);\n          }\n        });\n        datasetsArray.push({\n          label,\n          backgroundColor,\n          data,\n        });\n      }\n    });\n    return { labels: uniqueDates, data: datasetsArray };\n  };\n\n  const displayResults = (response) => {\n    const queryResult = response.result.reports[0].data.rows;\n\n    const data = transformAPIData(queryResult);\n    let transformedData = data[0];\n    let datesArray = data[1];\n\n    const groupedBySource = groupDataBySource(transformedData);\n    setTotalSources(Object.keys(groupedBySource).length);\n\n    const sumedVisits = sortSourcesByTotalVisits(groupedBySource);\n\n    const dataForChart = createDataForChart(\n      datesArray,\n      sumedVisits,\n      groupedBySource\n    );\n\n    setReportData({\n      ...reportData,\n      labels: dataForChart.labels,\n      datasets: dataForChart.data,\n    });\n  };\n\n  const options = {\n    tooltips: {\n      displayColors: true,\n      callbacks: {\n        mode: \"x\",\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          stacked: true,\n          gridLines: {\n            display: false,\n          },\n        },\n      ],\n      yAxes: [\n        {\n          stacked: true,\n          ticks: {\n            beginAtZero: true,\n          },\n          type: \"linear\",\n        },\n      ],\n    },\n    maintainAspectRatio: false,\n    legend: { position: \"bottom\" },\n    plugins: {\n      datalabels: {\n        font: {\n          size: 0,\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: reportData.labels,\n    datasets: reportData.datasets,\n  };\n\n  useEffect(() => {\n    const request = {\n      viewID: props.viewID,\n      startDate,\n      endDate,\n      metrics: \"ga:users\",\n      dimensions: [\"ga:source\", \"ga:date\"],\n    };\n    setTimeout(\n      () =>\n        queryReport(request)\n          .then((resp) => displayResults(resp))\n          .catch((error) => console.error(error)),\n      1100\n    );\n  }, [startDate, endDate]);\n\n  return (\n    <ReportWrapper>\n      <ChartTitle>Top 5 Sources of Visits</ChartTitle>\n      <Subtitle>{`Total sources - ${totalSources}`}</Subtitle>\n      <DatepickerRow>\n        <CustomDatePicker\n          placeholder={\"Start date\"}\n          date={startDate}\n          handleDateChange={(date) => setStartDate(date)}\n        />\n        <CustomDatePicker\n          placeholder={\"End date\"}\n          date={endDate}\n          handleDateChange={(date) => setEndDate(date)}\n        />\n      </DatepickerRow>\n      {reportData && (\n        <ChartWrapper>\n          <Bar data={data} width={100} height={250} options={options} />\n        </ChartWrapper>\n      )}\n    </ReportWrapper>\n  );\n};\n\nexport default SourceReport;\n"]},"metadata":{},"sourceType":"module"}